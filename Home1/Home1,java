abstract class Animal {
private String name;
private int age;

public Animal(String name, int age) {
this.name = name;
this.age = age;
}

public String getName() {
return name;
}

public int getAge() {
return age;
}

public abstract void makeSound();

public abstract void eat(int amount);

public abstract void move();
}

class Dog extends Animal {
public Dog(String name, int age) {
super(name, age);
}

@Override
public void makeSound() {
System.out.println("Woof!");
}

@Override
public void eat(int amount) {
System.out.println(getName() + " is eating " + amount + " units of food.");
}

@Override
public void move() {
System.out.println(getName() + " is running.");
}
}

class Cat extends Animal {
public Cat(String name, int age) {
super(name, age);
}

@Override
public void makeSound() {
System.out.println("Meow!");
}

@Override
public void eat(int amount) {
System.out.println(getName() + " is eating " + amount + " units of food.");
}

@Override
public void move() {
System.out.println(getName() + " is climbing.");
}
}

// Добавим еще один класс животного - Попугай
class Parrot extends Animal {
public Parrot(String name, int age) {
super(name, age);
}

@Override
public void makeSound() {
System.out.println("Squawk!");
}

@Override
public void eat(int amount) {
System.out.println(getName() + " is eating " + amount + " units of food.");
}

@Override
public void move() {
System.out.println(getName() + " is flying.");
}
}

public class AnimalTest {
public static void main(String[] args) {
Animal[] animals = new Animal[3];
animals[0] = new Dog("Buddy", 3);
animals[1] = new Cat("Whiskers", 5);
animals[2] = new Parrot("Polly", 2);

for (Animal animal : animals) {
animal.eat(2); // Подаем животному 2 единицы еды
animal.makeSound();
}
}
}
